# Importa√ß√£o das bibliotecas
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Fun√ß√£o para extrair dados do Banco Central
def extracao_bcb(codigo, data_inicio, data_fim):
    try:
        url = f'https://api.bcb.gov.br/dados/serie/bcdata.sgs.{codigo}/dados?formato=json&dataInicial={data_inicio}&dataFinal={data_fim}'
        df = pd.read_json(url)
        df.set_index('data', inplace=True)
        df.index = pd.to_datetime(df.index, dayfirst=True)
        return df
    except Exception as e:
        st.error(f"Erro ao carregar dados do c√≥digo {codigo}: {e}")
        return pd.DataFrame(columns=['data', 'valor']).set_index('data')

# Extra√ß√£o dos dados
dados = {
    "Saldo do Cr√©dito Rotativo": extracao_bcb(20587, '01/03/2007', '28/12/2024'),  # Saldo do cr√©dito rotativo - PF
    "Taxa de Inadimpl√™ncia (15 a 90 dias)": extracao_bcb(7912, '30/06/2000', '31/12/2012'),  # Inadimpl√™ncia (15 a 90 dias)
    "Taxa de Inadimpl√™ncia (>90 dias)": extracao_bcb(7934, '30/06/2000', '31/12/2012'),  # Inadimpl√™ncia (>90 dias)
    "Saldo da carteira - Cart√£o de cr√©dito parcelado": extracao_bcb(20588, '01/03/2007', '28/12/2024'),
    "Saldo da carteira - Cart√£o de cr√©dito √† vista": extracao_bcb(20589, '01/03/2007', '28/12/2024'),
    "Saldo da carteira - Cart√£o de cr√©dito total": extracao_bcb(20590, '01/03/2007', '28/12/2024'),
    "N√∫mero de Cart√µes de Cr√©dito Emitidos": extracao_bcb(25147, '31/12/2010', '28/12/2024'),  # N√∫mero de cart√µes emitidos
    "N√∫mero de Cart√µes de Cr√©dito Ativos": extracao_bcb(25149, '31/12/2010', '28/12/2024'),  # N√∫mero de cart√µes ativos
    "Valor total das transa√ß√µes com cart√µes de cr√©dito": extracao_bcb(25229, '31/12/2010', '28/12/2024'),
    "Taxa m√©dia de juros - Cart√£o de cr√©dito total": extracao_bcb(22024, '01/03/2007', '28/12/2024'),  # Taxa de juros do cart√£o
}

# Layout do dashboard
st.title("üìä Panorama do Uso de Cart√µes de Cr√©dito no Brasil")

# Texto explicativo
st.markdown("""
    Este dashboard apresenta uma an√°lise sobre o uso de cart√µes de cr√©dito por pessoas f√≠sicas no Brasil, 
    com o objetivo de fornecer informa√ß√µes atualizadas sobre a evolu√ß√£o do cr√©dito rotativo, inadimpl√™ncia, 
    as carteiras de cr√©dito e as opera√ß√µes realizadas.
""")

# Filtro lateral para selecionar o nome da tabela
tabela_selecionada = st.sidebar.selectbox("Selecione um Indicador", list(dados.keys()))

# Filtro de per√≠odo para gr√°ficos
data_inicio = st.sidebar.date_input("Data de In√≠cio", min_value=dados[tabela_selecionada].index.min(), max_value=dados[tabela_selecionada].index.max(), value=dados[tabela_selecionada].index.min())
data_fim = st.sidebar.date_input("Data de Fim", min_value=dados[tabela_selecionada].index.min(), max_value=dados[tabela_selecionada].index.max(), value=dados[tabela_selecionada].index.max())

# Fun√ß√£o para exibir gr√°fico e tabela com √∫ltimos 5 registros
def exibir_indicador(titulo, dados, unidade, data_inicio, data_fim):
    # Filtrando os dados de acordo com o per√≠odo
    dados_filtrados = dados[(dados.index >= pd.to_datetime(data_inicio)) & (dados.index <= pd.to_datetime(data_fim))]
    
    st.subheader(titulo)
    st.markdown(f"**Unidade:** {unidade}")
    
    if dados_filtrados.empty:
        st.warning(f"N√£o h√° dados dispon√≠veis para o indicador: {titulo} no per√≠odo selecionado.")
    else:
        # Exibir gr√°fico
        st.line_chart(dados_filtrados['valor'], height=250, use_container_width=True)
        
        # Exibir √∫ltimos 5 registros
        st.markdown("### √öltimos 5 Registros")
        st.write(dados_filtrados.tail(5))

# T√≠tulos e Unidades para cada indicador
indicadores = [
    ("Saldo do Cr√©dito Rotativo", dados["Saldo do Cr√©dito Rotativo"], "R$ milh√µes"),
    ("Taxa de Inadimpl√™ncia (15 a 90 dias)", dados["Taxa de Inadimpl√™ncia (15 a 90 dias)"], "%"),
    ("Taxa de Inadimpl√™ncia (>90 dias)", dados["Taxa de Inadimpl√™ncia (>90 dias)"], "%"),
    ("Saldo da Carteira - Cart√£o de Cr√©dito Parcelado", dados["Saldo da carteira - Cart√£o de cr√©dito parcelado"], "R$ milh√µes"),
    ("Saldo da Carteira - Cart√£o de Cr√©dito √† Vista", dados["Saldo da carteira - Cart√£o de cr√©dito √† vista"], "R$ milh√µes"),
    ("Saldo da Carteira - Cart√£o de Cr√©dito Total", dados["Saldo da carteira - Cart√£o de cr√©dito total"], "R$ milh√µes"),
    ("N√∫mero de Cart√µes de Cr√©dito Emitidos", dados["N√∫mero de Cart√µes de Cr√©dito Emitidos"], "unidades (milh√µes)"),
    ("N√∫mero de Cart√µes de Cr√©dito Ativos", dados["N√∫mero de Cart√µes de Cr√©dito Ativos"], "unidades (milh√µes)"),
    ("Valor Total das Transa√ß√µes com Cart√µes de Cr√©dito", dados["Valor total das transa√ß√µes com cart√µes de cr√©dito"], "R$ milh√µes"),
    ("Taxa m√©dia de juros - Cart√£o de cr√©dito total", dados["Taxa m√©dia de juros - Cart√£o de cr√©dito total"], "% a.a.")
]

# Exibir o gr√°fico e a tabela do indicador selecionado
indicador_selecionado = dados[tabela_selecionada]
unidade_selecionada = dict(indicadores)[tabela_selecionada]

exibir_indicador(tabela_selecionada, indicador_selecionado, unidade_selecionada, data_inicio, data_fim)

# Exibir dados mais recentes
st.markdown("### Dados Mais Recentes")
st.markdown(f"**{tabela_selecionada}**: {indicador_selecionado['valor'].iloc[-1]:.2f} {unidade_selecionada}")
